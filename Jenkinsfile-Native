@Library('common-jenkins') _

def agents = [
  deb5_32bit:      [ label: 'nr-build32-deb5-1' ],
  deb5_64bit:      [ label: 'native-deb5-64', ],
  deb8_64bit:      [ label: 'native-deb8-64' ],
  deb9_64bit:      [ label: 'native-deb9-64' ],
  freebsd11_32bit: [ label: 'freebsd32-11' ],
  freebsd11_64bit: [ label: 'freebsd64-11' ],
  freebsd12_64bit: [ label: 'freebsd64-12' ],
  macos:           [ label: 'macos' ],
  windows:         [ label: 'windows-build-pool' ],
]

def builds = [
  'freebsd11_64bit': [ agent: agents.freebsd11_64bit ],
  'freebsd11_32bit': [ agent: agents.freebsd11_32bit ],
  'freebsd12_64bit': [ agent: agents.freebsd12_64bit ],
  'deb5_32bit':      [ agent: agents.deb5_32bit ],
  'deb5_64bit':      [ agent: agents.deb5_64bit ],
  'deb8_64bit':      [ agent: agents.deb8_64bit ],
  'deb9_64bit':      [ agent: agents.deb9_64bit ],
  'macos':           [ agent: agents.macos ],
  'win32':           [ agent: agents.windows, perlPlatform:'VC-WIN32', winPlatform:'x86' ],
  'win64': [ agent: agents.windows, perlPlatform:'VC-WIN64A', winPlatform:'x64' ],
]

def createBuildStages(builds) {
  builds.collectEntries { name, definition ->
    [ "${name}": createBuildStage(name, definition) ]
  }
}

def createBuildStage(name, definition) {
  return {
    stage(name) {

      node(definition.agent.label) {
        ws("workspace/" + generateWorkspaceName("${env.APPLICATION_NAME}-${env.BRANCH_NAME}-${name}")) {
          checkout scm
          withEnv([
            "PLATFORM=${definition.platform ?: name}",
            "OPENSSL=${APPLICATION_NAME}-${OPENSSL_VERSION}",
          ]) {
            withAwsCredentials('jenkins-native-builds') {
              if (env.BRANCH_NAME == 'master') {
                dir("${OPENSSL}") {
                  deleteDir()
                }
              }

              sh """
                   aws s3 cp --no-progress s3://ookla-native-toolchains/${OPENSSL}.tar.gz .
                   tar xzf ${OPENSSL}.tar.gz 
                   rm -f ${OPENSSL}.tar.gz 
                 """
              dir("${OPENSSL}") {
                dir("${OPENSSL}") {
                  deleteDir()
                }
                if (isUnix()) {
                  sh """
                    set -eu
                    ./config --prefix=/usr --openssldir=/usr/lib/ssl no-ssl    no-tests no-ui-console no-unit-test 
                    make 
                    make DESTDIR=./${OPENSSL} install_ssldirs install_sw
                  """
                } else {
              sh """
                   set -eu
                   if [[ ! -f jom.exe ]]; then 
                       aws s3 cp  --no-progress s3://ookla-native-toolchains/jom.zip .
                       unzip -o jom.zip
                       rm -rf jom.zip
                   fi
                 """
                  // Need to rewrite the makefile here, which is broken for static builds.
                  // Also need to do some over-the-top escaping to deal with groovy->cmd->perl
                  makefileRewriteCommand = '''
                  perl -pi.bak -e
                  's,@("\\$\\(PERL\\)" "\\$\\(SRCDIR\\)\\\\util\\\\copy.pl\" \\$\\((.*)\\) \\\\),\\@if not "\\$($2)" == "" $1,'
                  makefile
                  ''' \
                  .stripIndent() \
                  .replaceAll('\n', ' ') \
                  .replaceAll('"', '\\\\"') \
                  .replaceAll('\'', '"')

                  // https://stackoverflow.com/questions/50365513/building-a-static-version-of-openssl-library-using-md-switch
                  msvcBat """
                    set PATH=c:\\Strawberry\\perl\\bin;%PATH%
                    set __CNF_CXXFLAGS=/FS 
                    set __CNF_CFLAGS=/FS
                    perl Configure no-shared    no-tests no-ui-console no-unit-test  --prefix=C:\\OpenSSL --openssldir=C:\\OpenSSL\\ssl ${definition.perlPlatform}
                    ${makefileRewriteCommand}
                    set DESTDIR=${OPENSSL}
                    jom
                    nmake install_ssldirs
		    nmake install_sw
                  """, [winPlatform: definition.winPlatform]
                }

                // compress and publish results
                sh """
                  set -eu
                  tar cvzf ${OPENSSL}-${PLATFORM}.tar.gz  ${OPENSSL} 
                  aws s3 cp --no-progress ${OPENSSL}-${PLATFORM}.tar.gz s3://ookla-native-toolchains/${OPENSSL}-${PLATFORM}.tar.gz
                """
              }
            }
          }
        }
      }
    }
  }
}

pipeline {
  agent none
  environment {
    APPLICATION_NAME = "openssl"
    BUILD_TIMESTAMP = "${timeStamp}"
    OPENSSL_VERSION = "1.1.1c"
  }
  stages {
    stage('Build All') {
      steps {
        script {
          parallel createBuildStages(builds)
        }
      }
    }
  }
}
